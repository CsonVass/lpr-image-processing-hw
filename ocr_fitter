{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CsonVass/lpr-image-processing-hw/blob/main/ocr_fitter\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div class=\"markdown-google-sans\">\n",
        "\n",
        "# <strong>Képfeldolgozás házi feladat - Automatikus rendszámtábla felismerő alkalmazás</strong>\n",
        "</div>\n",
        "\n",
        "* Jakosa Emma Kloé\n",
        "* Lanczki Enikő Bella\n",
        "* Ifkovics Barnabás\n",
        "* Vass Csongor"
      ],
      "metadata": {
        "id": "_6-n4xi7f7uC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div class=\"markdown-google-sans\">\n",
        "\n",
        "## <strong>Környezet inicializálása, adatok betöltése</strong>\n",
        "</div>"
      ],
      "metadata": {
        "id": "a0p_oxFgqQQb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import os\n",
        "import sys\n",
        "import pandas as pd\n",
        "import pickle\n",
        "import random\n",
        "import urllib\n",
        "import imp\n",
        "import pathlib\n",
        "import PIL\n",
        "import PIL.Image\n",
        "import tensorflow as tf\n",
        "from keras import layers\n",
        "from keras import backend as K\n",
        "from keras import models\n",
        "from keras import optimizers\n",
        "from keras import callbacks\n",
        "from matplotlib.backends.backend_pdf import PdfPages\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.python.ops.nn_ops import softmax\n",
        "from collections import Counter"
      ],
      "metadata": {
        "id": "5azecQDif63O"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2wOMLJbkknkp",
        "outputId": "0f55979a-8714-42e0-b3e2-7b6c9cdabf58"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DRIVE_PATH = 'drive/MyDrive/Colab Notebooks/ALPR'\n",
        "\n",
        "\n",
        "data_dir = pathlib.Path('/content/drive/MyDrive/Colab Notebooks/ALPR/data') \n",
        "plates = list(sorted(data_dir.glob('train/*_p.png')))\n",
        "high = list(sorted(data_dir.glob('train/*_h.jpg')))\n",
        "low = list(sorted(data_dir.glob('train/*_l.jpg')))"
      ],
      "metadata": {
        "id": "Birmf0IWgSvZ"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plate_values = []\n",
        "plate_images = []\n",
        "high_images = []\n",
        "low_images = []\n",
        "\n",
        "for i in plates:\n",
        "  plate_values.append((str(i).split(\"/\")[-1].split(\"_\")[0]))\n",
        "  plate_images.append(tf.io.read_file(str(i)))\n",
        "\n",
        "# for i in high:\n",
        "#   high_images.append(PIL.Image.open(i))\n",
        "\n",
        "# for i in low:\n",
        "#   low_images.append(PIL.Image.open(i))"
      ],
      "metadata": {
        "id": "kKlnHF27OYHs"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = []\n",
        "b = []\n",
        "c = []\n",
        "\n",
        "for i in plates:\n",
        "  a.append((str(i).split(\"/\")[-1].split(\"_\")[0]))\n",
        "\n",
        "for i in high:\n",
        "  b.append((str(i).split(\"/\")[-1].split(\"_\")[0]))\n",
        "\n",
        "for i in low:\n",
        "  c.append((str(i).split(\"/\")[-1].split(\"_\")[0]))"
      ],
      "metadata": {
        "id": "ca841MjSndQm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hiányos adatok"
      ],
      "metadata": {
        "id": "HUIrE71ppN3c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# diff = []\n",
        "\n",
        "# for item in a:\n",
        "#   if item not in b:\n",
        "#     diff.append(item)\n",
        "\n",
        "# for item in a:\n",
        "#   if item not in c:\n",
        "#     diff.append(item)\n",
        "\n",
        "# for item in c:\n",
        "#   if item not in b:\n",
        "#     diff.append(item)\n",
        "\n",
        "# print(diff)"
      ],
      "metadata": {
        "id": "CuUTfwqMnva1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Kirajzolás (just for fun)"
      ],
      "metadata": {
        "id": "0ph9fjM8mknz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# print(plate_values[1])\n",
        "# display(plate_images[1])\n",
        "# display(high_images[1])\n",
        "# display(low_images[1])"
      ],
      "metadata": {
        "id": "27HPIMt4mCW5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# characters = set(char for plate_value in plate_values for char in plate_value)\n",
        "\n",
        "# batch_size = 16\n",
        "\n",
        "# img_width = 200\n",
        "# img_height = 50\n",
        "\n",
        "# downsample_factor = 4\n",
        "\n",
        "# max_length = max([len(plate_value) for plate_value in plate_values])"
      ],
      "metadata": {
        "id": "ZzYvyG4WmwwB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<div class=\"markdown-google-sans\">\n",
        "\n",
        "## <strong>Szegmentálás és karakterfelismerés</strong>\n",
        "</div>"
      ],
      "metadata": {
        "id": "pdtbMthHuRsB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Path to the data directory\n",
        "data_dir = pathlib.Path(\"/content/drive/MyDrive/Colab Notebooks/ALPR/data/train\")\n",
        "\n",
        "# Get list of all the images\n",
        "images = sorted(list(map(str, list(data_dir.glob(\"*_p.png\")))))\n",
        "raw_labels = [img.split(os.path.sep)[-1].split(\"_p.png\")[0] for img in images]\n",
        "\n",
        "max_length = max([len(label) for label in raw_labels])\n",
        "labels = [label.ljust(max_length) for label in raw_labels]\n",
        "\n",
        "characters = set(char for label in labels for char in label)\n",
        "characters = sorted(list(characters))\n",
        "\n",
        "print(\"Number of images found: \", len(images))\n",
        "print(\"Number of labels found: \", len(labels))\n",
        "print(\"Number of unique characters: \", len(characters))\n",
        "print(\"Characters present: \", characters)\n",
        "\n",
        "# Batch size for training and validation\n",
        "batch_size = 16\n",
        "\n",
        "# Desired image dimensions\n",
        "img_width = 200\n",
        "img_height = 50\n",
        "\n",
        "# Factor by which the image is going to be downsampled\n",
        "# by the convolutional blocks. We will be using two\n",
        "# convolution blocks and each block will have\n",
        "# a pooling layer which downsample the features by a factor of 2.\n",
        "# Hence total downsampling factor would be 4.\n",
        "downsample_factor = 4\n",
        "\n",
        "# Maximum length of any captcha in the dataset\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z7KGcQpRJJ9t",
        "outputId": "1321fa37-2fe2-4a9d-f239-1e781b6d3ca0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of images found:  1321\n",
            "Number of labels found:  1321\n",
            "Number of unique characters:  37\n",
            "Characters present:  [' ', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# char_to_num = layers.StringLookup(vocabulary=list(characters), num_oov_indices=0, mask_token=None)\n",
        "\n",
        "# num_to_char = layers.StringLookup(vocabulary=char_to_num.get_vocabulary(), num_oov_indices=0, mask_token=None, invert=True)\n",
        "\n",
        "# x_train, x_valid, y_train, y_valid = train_test_split(plate_images, plate_values, train_size=0.9)\n",
        "\n",
        "# def encode_single_sample(img, label):\n",
        "#   img = tf.io.decode_png(img, channels=1)\n",
        "#   img = tf.image.convert_image_dtype(img, tf.float32)\n",
        "#   img = tf.image.resize(img, [img_height, img_width])\n",
        "#   img = tf.transpose(img, perm=[1, 0, 2])\n",
        "#   label = char_to_num(tf.strings.unicode_split(label, input_encoding=\"UTF-8\"))\n",
        "#   return {\"image\": img, \"label\":label}"
      ],
      "metadata": {
        "id": "953AWRq3xWAK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapping characters to integers\n",
        "char_to_num = layers.StringLookup(\n",
        "    vocabulary=list(characters), mask_token=None\n",
        ")\n",
        "\n",
        "# Mapping integers back to original characters\n",
        "num_to_char = layers.StringLookup(\n",
        "    vocabulary=char_to_num.get_vocabulary(), mask_token=None, invert=True,\n",
        ")\n",
        "\n",
        "\n",
        "def split_data(images, labels, train_size=0.9, shuffle=True):\n",
        "    # 1. Get the total size of the dataset\n",
        "    size = len(images)\n",
        "    # 2. Make an indices array and shuffle it, if required\n",
        "    indices = np.arange(size)\n",
        "    if shuffle:\n",
        "        np.random.shuffle(indices)\n",
        "    # 3. Get the size of training samples\n",
        "    train_samples = int(size * train_size)\n",
        "    # 4. Split data into training and validation sets\n",
        "    x_train, y_train = images[indices[:train_samples]], labels[indices[:train_samples]]\n",
        "    x_valid, y_valid = images[indices[train_samples:]], labels[indices[train_samples:]]\n",
        "    return x_train, x_valid, y_train, y_valid\n",
        "\n",
        "\n",
        "# Splitting data into training and validation sets\n",
        "x_train, x_valid, y_train, y_valid = split_data(np.array(images), np.array(labels))\n",
        "\n",
        "\n",
        "def encode_single_sample(img_path, label):\n",
        "    # 1. Read image\n",
        "    img = tf.io.read_file(img_path)\n",
        "    # 2. Decode and convert to grayscale\n",
        "    img = tf.io.decode_png(img, channels=1)\n",
        "    # 3. Convert to float32 in [0, 1] range\n",
        "    img = tf.image.convert_image_dtype(img, tf.float32)\n",
        "    # 4. Resize to the desired size\n",
        "    img = tf.image.resize(img, [img_height, img_width])\n",
        "    # 5. Transpose the image because we want the time\n",
        "    # dimension to correspond to the width of the image.\n",
        "    img = tf.transpose(img, perm=[1, 0, 2])\n",
        "    # 6. Map the characters in label to numbers\n",
        "    label = char_to_num(tf.strings.unicode_split(label, input_encoding=\"UTF-8\"))\n",
        "    # 7. Return a dict as our model is expecting two inputs\n",
        "    return {\"image\": img, \"label\": label}"
      ],
      "metadata": {
        "id": "wI3Yf3lLIsS2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))\n",
        "train_dataset = (\n",
        "    train_dataset.map(\n",
        "        encode_single_sample, num_parallel_calls=tf.data.AUTOTUNE\n",
        "    )\n",
        "    .batch(batch_size)\n",
        "    .prefetch(buffer_size=tf.data.AUTOTUNE)\n",
        ")\n",
        "\n",
        "validation_dataset = tf.data.Dataset.from_tensor_slices((x_valid, y_valid))\n",
        "validation_dataset = (\n",
        "    validation_dataset.map(\n",
        "        encode_single_sample, num_parallel_calls=tf.data.AUTOTUNE\n",
        "    )\n",
        "    .batch(batch_size)\n",
        "    .prefetch(buffer_size=tf.data.AUTOTUNE)\n",
        ")"
      ],
      "metadata": {
        "id": "gq6imu05z92H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "_, ax = plt.subplots(4, 4, figsize=(10, 5))\n",
        "for batch in train_dataset.take(1):\n",
        "  images = batch[\"image\"]\n",
        "  labels = batch[\"label\"]\n",
        "  for i in range(16):\n",
        "    img = (images[i] * 255).numpy().astype(\"uint8\")\n",
        "    label = tf.strings.reduce_join(num_to_char(labels[i])).numpy().decode(\"utf-8\")\n",
        "    ax[i // 4, i % 4].imshow(img[:, :, 0].T, cmap=\"gray\")\n",
        "    ax[i // 4, i % 4].set_title(label)\n",
        "    ax[i // 4, i % 4].axis(\"off\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "dD_QeCaq24t3",
        "outputId": "affb4b43-63dd-4687-d97d-0cbde137b080"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# class CTCLayer(layers.Layer):\n",
        "#   def __init__(self, name=None):\n",
        "#     super().__init__(name=name)\n",
        "#     self.loss_fn = K.ctc_batch_cost\n",
        "\n",
        "#   def call(self, y_true, y_pred):\n",
        "#     batch_len = tf.cast(tf.shape(y_true)[0], dtype=\"int64\")\n",
        "#     input_length = tf.cast(tf.shape(y_pred)[1], dtype=\"int64\")\n",
        "#     label_length = tf.cast(tf.shape(y_true)[1], dtype=\"int64\")\n",
        "\n",
        "#     input_length = input_length * tf.ones(shape=(batch_len, 1), dtype=\"int64\")\n",
        "#     label_length = label_length * tf.ones(shape=(batch_len, 1), dtype=\"int64\")\n",
        "\n",
        "#     loss = self.loss_fn(y_true, y_pred, input_length, label_length)\n",
        "#     self.add_loss(loss)\n",
        "\n",
        "#     return y_pred\n",
        "\n",
        "# def build_model():\n",
        "#   input_img = layers.Input(\n",
        "#       shape=(img_width, img_height, 1), name=\"image\", dtype=\"float32\"\n",
        "#   )\n",
        "#   labels = layers.Input(name=\"label\", shape=(None,), dtype=\"float32\")\n",
        "\n",
        "#   x = layers.Conv2D(\n",
        "#       32,\n",
        "#       (3, 3),\n",
        "#       activation=\"relu\",\n",
        "#       kernel_initializer=\"he_normal\",\n",
        "#       padding=\"same\",\n",
        "#       name=\"Conv1\",\n",
        "#   )(input_img)\n",
        "#   x = layers.MaxPooling2D((2, 2), name=\"pool1\")(x)\n",
        "\n",
        "#   x = layers.Conv2D(\n",
        "#       64,\n",
        "#       (3, 3),\n",
        "#       activation=\"relu\",\n",
        "#       kernel_initializer=\"he_normal\",\n",
        "#       padding=\"same\",\n",
        "#       name=\"Conv2\"\n",
        "#   )(x)\n",
        "#   x = layers.MaxPooling2D((2,2 ), name=\"pool2\")(x)\n",
        "\n",
        "#   new_shape = ((img_width // 4), (img_height // 4) * 64)\n",
        "#   x = layers.Reshape(target_shape=new_shape, name=\"reshape\")(x)\n",
        "#   x = layers.Dense(64, activation=\"relu\", name=\"dense1\")(x)\n",
        "#   x = layers.Dropout(0.2)(x)\n",
        "\n",
        "#   x = layers.Bidirectional(layers.LSTM(128, return_sequences=True, dropout=0.25))(x)\n",
        "#   x = layers.Bidirectional(layers.LSTM(64, return_sequences=True, dropout=0.25))(x)\n",
        "\n",
        "#   x = layers.Dense(len(characters) + 1, activation=\"softmax\", name=\"dense2\")(x)\n",
        "\n",
        "#   output = CTCLayer(name=\"ctc_loss\")(labels, x)\n",
        "\n",
        "#   model = models.Model(inputs=[input_img, labels], outputs=output, name=\"ocr_model_v1\")\n",
        "\n",
        "#   opt = optimizers.Adam()\n",
        "#   model.compile(optimizer=opt)\n",
        "#   return model\n",
        "\n",
        "# model = build_model()\n",
        "# model.summary()"
      ],
      "metadata": {
        "id": "jOMqXoIi_E7_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CTCLayer(layers.Layer):\n",
        "    def __init__(self, name=None):\n",
        "        super().__init__(name=name)\n",
        "        self.loss_fn = K.ctc_batch_cost\n",
        "\n",
        "    def call(self, y_true, y_pred):\n",
        "        # Compute the training-time loss value and add it\n",
        "        # to the layer using `self.add_loss()`.\n",
        "        batch_len = tf.cast(tf.shape(y_true)[0], dtype=\"int64\")\n",
        "        input_length = tf.cast(tf.shape(y_pred)[1], dtype=\"int64\")\n",
        "        label_length = tf.cast(tf.shape(y_true)[1], dtype=\"int64\")\n",
        "\n",
        "        input_length = input_length * tf.ones(shape=(batch_len, 1), dtype=\"int64\")\n",
        "        label_length = label_length * tf.ones(shape=(batch_len, 1), dtype=\"int64\")\n",
        "\n",
        "        loss = self.loss_fn(y_true, y_pred, input_length, label_length)\n",
        "        self.add_loss(loss)\n",
        "\n",
        "        # At test time, just return the computed predictions\n",
        "        return y_pred\n",
        "\n",
        "\n",
        "def build_model():\n",
        "    # Inputs to the model\n",
        "    input_img = layers.Input(\n",
        "        shape=(img_width, img_height, 1), name=\"image\", dtype=\"float32\"\n",
        "    )\n",
        "    labels = layers.Input(name=\"label\", shape=(None,), dtype=\"float32\")\n",
        "\n",
        "    # First conv block\n",
        "    x = layers.Conv2D(\n",
        "        32,\n",
        "        (3, 3),\n",
        "        activation=\"relu\",\n",
        "        kernel_initializer=\"he_normal\",\n",
        "        padding=\"same\",\n",
        "        name=\"Conv1\",\n",
        "    )(input_img)\n",
        "    x = layers.MaxPooling2D((2, 2), name=\"pool1\")(x)\n",
        "\n",
        "    # Second conv block\n",
        "    x = layers.Conv2D(\n",
        "        64,\n",
        "        (3, 3),\n",
        "        activation=\"relu\",\n",
        "        kernel_initializer=\"he_normal\",\n",
        "        padding=\"same\",\n",
        "        name=\"Conv2\",\n",
        "    )(x)\n",
        "    x = layers.MaxPooling2D((2, 2), name=\"pool2\")(x)\n",
        "\n",
        "    # We have used two max pool with pool size and strides 2.\n",
        "    # Hence, downsampled feature maps are 4x smaller. The number of\n",
        "    # filters in the last layer is 64. Reshape accordingly before\n",
        "    # passing the output to the RNN part of the model\n",
        "    new_shape = ((img_width // 4), (img_height // 4) * 64)\n",
        "    x = layers.Reshape(target_shape=new_shape, name=\"reshape\")(x)\n",
        "    x = layers.Dense(64, activation=\"relu\", name=\"dense1\")(x)\n",
        "    x = layers.Dropout(0.2)(x)\n",
        "\n",
        "    # RNNs\n",
        "    x = layers.Bidirectional(layers.LSTM(128, return_sequences=True, dropout=0.25))(x)\n",
        "    x = layers.Bidirectional(layers.LSTM(64, return_sequences=True, dropout=0.25))(x)\n",
        "\n",
        "    # Output layer\n",
        "    x = layers.Dense(\n",
        "        len(char_to_num.get_vocabulary()) + 1, activation=\"softmax\", name=\"dense2\"\n",
        "    )(x)\n",
        "\n",
        "    # Add CTC layer for calculating CTC loss at each step\n",
        "    output = CTCLayer(name=\"ctc_loss\")(labels, x)\n",
        "\n",
        "    # Define the model\n",
        "    model = models.Model(\n",
        "        inputs=[input_img, labels], outputs=output, name=\"ocr_model_v1\"\n",
        "    )\n",
        "    # Optimizer\n",
        "    opt = optimizers.Adam()\n",
        "    # Compile the model and return\n",
        "    model.compile(optimizer=opt)\n",
        "    return model\n",
        "\n",
        "\n",
        "# Get the model\n",
        "model = build_model()\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i7NQ_RcBIILZ",
        "outputId": "4ea0abab-ea48-4407-8d98-85354794f651"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"ocr_model_v1\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " image (InputLayer)             [(None, 200, 50, 1)  0           []                               \n",
            "                                ]                                                                 \n",
            "                                                                                                  \n",
            " Conv1 (Conv2D)                 (None, 200, 50, 32)  320         ['image[0][0]']                  \n",
            "                                                                                                  \n",
            " pool1 (MaxPooling2D)           (None, 100, 25, 32)  0           ['Conv1[0][0]']                  \n",
            "                                                                                                  \n",
            " Conv2 (Conv2D)                 (None, 100, 25, 64)  18496       ['pool1[0][0]']                  \n",
            "                                                                                                  \n",
            " pool2 (MaxPooling2D)           (None, 50, 12, 64)   0           ['Conv2[0][0]']                  \n",
            "                                                                                                  \n",
            " reshape (Reshape)              (None, 50, 768)      0           ['pool2[0][0]']                  \n",
            "                                                                                                  \n",
            " dense1 (Dense)                 (None, 50, 64)       49216       ['reshape[0][0]']                \n",
            "                                                                                                  \n",
            " dropout (Dropout)              (None, 50, 64)       0           ['dense1[0][0]']                 \n",
            "                                                                                                  \n",
            " bidirectional (Bidirectional)  (None, 50, 256)      197632      ['dropout[0][0]']                \n",
            "                                                                                                  \n",
            " bidirectional_1 (Bidirectional  (None, 50, 128)     164352      ['bidirectional[0][0]']          \n",
            " )                                                                                                \n",
            "                                                                                                  \n",
            " label (InputLayer)             [(None, None)]       0           []                               \n",
            "                                                                                                  \n",
            " dense2 (Dense)                 (None, 50, 39)       5031        ['bidirectional_1[0][0]']        \n",
            "                                                                                                  \n",
            " ctc_loss (CTCLayer)            (None, 50, 39)       0           ['label[0][0]',                  \n",
            "                                                                  'dense2[0][0]']                 \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 435,047\n",
            "Trainable params: 435,047\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 100\n",
        "early_stopping_patience = 10\n",
        "early_stopping = callbacks.EarlyStopping(\n",
        "    monitor=\"val_loss\", patience=early_stopping_patience, restore_best_weights=True\n",
        ")\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(\n",
        "    train_dataset,\n",
        "    validation_data=validation_dataset,\n",
        "    epochs=epochs,\n",
        "    callbacks=[early_stopping],\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2OcV63pNEAXS",
        "outputId": "6e02c9ac-365d-4d4a-91f0-a1de7bbf08b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "75/75 [==============================] - 48s 476ms/step - loss: 34.2189 - val_loss: 25.6679\n",
            "Epoch 2/100\n",
            "75/75 [==============================] - 33s 439ms/step - loss: 23.3671 - val_loss: 22.3299\n",
            "Epoch 3/100\n",
            "75/75 [==============================] - 33s 440ms/step - loss: 21.0252 - val_loss: 20.0340\n",
            "Epoch 4/100\n",
            "75/75 [==============================] - 33s 437ms/step - loss: 20.4021 - val_loss: 19.7153\n",
            "Epoch 5/100\n",
            "75/75 [==============================] - 33s 438ms/step - loss: 20.2013 - val_loss: 19.5209\n",
            "Epoch 6/100\n",
            "75/75 [==============================] - 36s 478ms/step - loss: 19.9868 - val_loss: 19.2954\n",
            "Epoch 7/100\n",
            "75/75 [==============================] - 36s 475ms/step - loss: 19.7419 - val_loss: 19.0293\n",
            "Epoch 8/100\n",
            "75/75 [==============================] - 34s 450ms/step - loss: 19.4643 - val_loss: 18.7158\n",
            "Epoch 9/100\n",
            "75/75 [==============================] - 34s 450ms/step - loss: 19.2112 - val_loss: 18.5991\n",
            "Epoch 10/100\n",
            "75/75 [==============================] - 34s 448ms/step - loss: 19.0635 - val_loss: 18.3449\n",
            "Epoch 11/100\n",
            "75/75 [==============================] - 34s 446ms/step - loss: 18.9130 - val_loss: 18.2125\n",
            "Epoch 12/100\n",
            "75/75 [==============================] - 36s 474ms/step - loss: 18.8010 - val_loss: 18.1388\n",
            "Epoch 13/100\n",
            "75/75 [==============================] - 34s 446ms/step - loss: 18.4306 - val_loss: 17.6139\n",
            "Epoch 14/100\n",
            "75/75 [==============================] - 34s 450ms/step - loss: 17.9652 - val_loss: 17.3045\n",
            "Epoch 15/100\n",
            "75/75 [==============================] - 34s 448ms/step - loss: 17.8112 - val_loss: 17.0720\n",
            "Epoch 16/100\n",
            "75/75 [==============================] - 34s 452ms/step - loss: 17.4888 - val_loss: 16.8838\n",
            "Epoch 17/100\n",
            "75/75 [==============================] - 33s 440ms/step - loss: 17.1649 - val_loss: 16.3768\n",
            "Epoch 18/100\n",
            "75/75 [==============================] - 38s 510ms/step - loss: 16.7613 - val_loss: 15.9050\n",
            "Epoch 19/100\n",
            "75/75 [==============================] - 34s 446ms/step - loss: 16.2640 - val_loss: 15.5221\n",
            "Epoch 20/100\n",
            "75/75 [==============================] - 33s 442ms/step - loss: 15.8542 - val_loss: 15.0986\n",
            "Epoch 21/100\n",
            "75/75 [==============================] - 33s 440ms/step - loss: 15.4170 - val_loss: 14.7250\n",
            "Epoch 22/100\n",
            "75/75 [==============================] - 33s 436ms/step - loss: 15.0165 - val_loss: 14.3682\n",
            "Epoch 23/100\n",
            "75/75 [==============================] - 36s 474ms/step - loss: 14.4644 - val_loss: 13.8237\n",
            "Epoch 24/100\n",
            "75/75 [==============================] - 36s 481ms/step - loss: 13.9238 - val_loss: 13.4820\n",
            "Epoch 25/100\n",
            "75/75 [==============================] - 34s 452ms/step - loss: 13.4273 - val_loss: 13.0417\n",
            "Epoch 26/100\n",
            "75/75 [==============================] - 34s 453ms/step - loss: 12.9661 - val_loss: 12.7862\n",
            "Epoch 27/100\n",
            "75/75 [==============================] - 35s 467ms/step - loss: 12.4515 - val_loss: 12.4350\n",
            "Epoch 28/100\n",
            "75/75 [==============================] - 37s 486ms/step - loss: 12.0069 - val_loss: 11.8697\n",
            "Epoch 29/100\n",
            "75/75 [==============================] - 33s 443ms/step - loss: 11.4856 - val_loss: 11.5791\n",
            "Epoch 30/100\n",
            "75/75 [==============================] - 35s 467ms/step - loss: 11.0816 - val_loss: 11.1552\n",
            "Epoch 31/100\n",
            "75/75 [==============================] - 33s 437ms/step - loss: 10.6338 - val_loss: 10.8934\n",
            "Epoch 32/100\n",
            "75/75 [==============================] - 33s 440ms/step - loss: 10.1972 - val_loss: 10.3827\n",
            "Epoch 33/100\n",
            "75/75 [==============================] - 33s 442ms/step - loss: 9.8159 - val_loss: 9.9897\n",
            "Epoch 34/100\n",
            "75/75 [==============================] - 33s 439ms/step - loss: 9.4711 - val_loss: 9.6895\n",
            "Epoch 35/100\n",
            "75/75 [==============================] - 35s 467ms/step - loss: 9.0167 - val_loss: 9.3814\n",
            "Epoch 36/100\n",
            "75/75 [==============================] - 35s 467ms/step - loss: 8.7251 - val_loss: 9.1190\n",
            "Epoch 37/100\n",
            "75/75 [==============================] - 33s 442ms/step - loss: 8.4147 - val_loss: 8.9040\n",
            "Epoch 38/100\n",
            "75/75 [==============================] - 33s 444ms/step - loss: 8.0847 - val_loss: 8.7551\n",
            "Epoch 39/100\n",
            "75/75 [==============================] - 34s 447ms/step - loss: 7.7771 - val_loss: 8.1718\n",
            "Epoch 40/100\n",
            "75/75 [==============================] - 33s 444ms/step - loss: 7.4448 - val_loss: 7.8727\n",
            "Epoch 41/100\n",
            "75/75 [==============================] - 35s 470ms/step - loss: 7.1891 - val_loss: 7.6824\n",
            "Epoch 42/100\n",
            "75/75 [==============================] - 36s 473ms/step - loss: 6.8455 - val_loss: 7.4934\n",
            "Epoch 43/100\n",
            "75/75 [==============================] - 33s 441ms/step - loss: 6.5643 - val_loss: 7.2474\n",
            "Epoch 44/100\n",
            "75/75 [==============================] - 33s 441ms/step - loss: 6.3182 - val_loss: 7.3336\n",
            "Epoch 45/100\n",
            "75/75 [==============================] - 33s 442ms/step - loss: 6.0817 - val_loss: 7.0133\n",
            "Epoch 46/100\n",
            "75/75 [==============================] - 34s 450ms/step - loss: 5.9420 - val_loss: 6.6692\n",
            "Epoch 47/100\n",
            "75/75 [==============================] - 39s 514ms/step - loss: 5.6192 - val_loss: 6.6238\n",
            "Epoch 48/100\n",
            "75/75 [==============================] - 34s 454ms/step - loss: 5.3288 - val_loss: 6.4981\n",
            "Epoch 49/100\n",
            "75/75 [==============================] - 35s 461ms/step - loss: 5.2232 - val_loss: 6.3407\n",
            "Epoch 50/100\n",
            "75/75 [==============================] - 34s 452ms/step - loss: 4.8876 - val_loss: 6.2070\n",
            "Epoch 51/100\n",
            "75/75 [==============================] - 34s 452ms/step - loss: 4.8272 - val_loss: 5.8606\n",
            "Epoch 52/100\n",
            "75/75 [==============================] - 34s 450ms/step - loss: 4.5903 - val_loss: 5.6867\n",
            "Epoch 53/100\n",
            "75/75 [==============================] - 38s 510ms/step - loss: 4.3740 - val_loss: 5.6557\n",
            "Epoch 54/100\n",
            "75/75 [==============================] - 34s 450ms/step - loss: 4.1290 - val_loss: 5.5210\n",
            "Epoch 55/100\n",
            "75/75 [==============================] - 34s 450ms/step - loss: 3.9528 - val_loss: 5.3710\n",
            "Epoch 56/100\n",
            "75/75 [==============================] - 34s 447ms/step - loss: 3.7866 - val_loss: 5.2813\n",
            "Epoch 57/100\n",
            "75/75 [==============================] - 33s 445ms/step - loss: 3.5796 - val_loss: 5.3382\n",
            "Epoch 58/100\n",
            "75/75 [==============================] - 34s 447ms/step - loss: 3.4416 - val_loss: 5.3058\n",
            "Epoch 59/100\n",
            "75/75 [==============================] - 37s 489ms/step - loss: 3.2359 - val_loss: 5.1449\n",
            "Epoch 60/100\n",
            "75/75 [==============================] - 34s 451ms/step - loss: 3.1558 - val_loss: 4.9114\n",
            "Epoch 61/100\n",
            "75/75 [==============================] - 36s 474ms/step - loss: 2.9953 - val_loss: 4.8891\n",
            "Epoch 62/100\n",
            "75/75 [==============================] - 35s 470ms/step - loss: 2.9336 - val_loss: 4.7960\n",
            "Epoch 63/100\n",
            "75/75 [==============================] - 34s 455ms/step - loss: 2.7195 - val_loss: 4.8608\n",
            "Epoch 64/100\n",
            "75/75 [==============================] - 34s 457ms/step - loss: 2.6490 - val_loss: 4.8144\n",
            "Epoch 65/100\n",
            "75/75 [==============================] - 39s 516ms/step - loss: 2.4832 - val_loss: 4.6555\n",
            "Epoch 66/100\n",
            "75/75 [==============================] - 34s 456ms/step - loss: 2.3756 - val_loss: 4.6107\n",
            "Epoch 67/100\n",
            "75/75 [==============================] - 34s 448ms/step - loss: 2.3639 - val_loss: 4.5603\n",
            "Epoch 68/100\n",
            "75/75 [==============================] - 34s 452ms/step - loss: 2.2783 - val_loss: 4.2858\n",
            "Epoch 69/100\n",
            "75/75 [==============================] - 34s 448ms/step - loss: 2.2228 - val_loss: 4.5034\n",
            "Epoch 70/100\n",
            "75/75 [==============================] - 33s 445ms/step - loss: 2.0349 - val_loss: 4.1596\n",
            "Epoch 71/100\n",
            "75/75 [==============================] - 38s 500ms/step - loss: 1.9754 - val_loss: 4.3094\n",
            "Epoch 72/100\n",
            "75/75 [==============================] - 34s 449ms/step - loss: 1.9176 - val_loss: 4.1957\n",
            "Epoch 73/100\n",
            "75/75 [==============================] - 34s 457ms/step - loss: 1.7428 - val_loss: 4.0669\n",
            "Epoch 74/100\n",
            "75/75 [==============================] - 34s 453ms/step - loss: 1.6504 - val_loss: 4.1631\n",
            "Epoch 75/100\n",
            "75/75 [==============================] - 34s 451ms/step - loss: 1.6704 - val_loss: 4.1000\n",
            "Epoch 76/100\n",
            "75/75 [==============================] - 34s 453ms/step - loss: 1.5644 - val_loss: 3.9917\n",
            "Epoch 77/100\n",
            "75/75 [==============================] - 34s 454ms/step - loss: 1.4795 - val_loss: 4.0434\n",
            "Epoch 78/100\n",
            "75/75 [==============================] - 39s 519ms/step - loss: 1.4707 - val_loss: 4.0473\n",
            "Epoch 79/100\n",
            "75/75 [==============================] - 35s 463ms/step - loss: 1.4782 - val_loss: 4.5047\n",
            "Epoch 80/100\n",
            "75/75 [==============================] - 34s 455ms/step - loss: 1.5151 - val_loss: 4.0736\n",
            "Epoch 81/100\n",
            "75/75 [==============================] - 34s 448ms/step - loss: 1.3883 - val_loss: 3.9057\n",
            "Epoch 82/100\n",
            "75/75 [==============================] - 34s 449ms/step - loss: 1.2268 - val_loss: 3.9407\n",
            "Epoch 83/100\n",
            "75/75 [==============================] - 34s 449ms/step - loss: 1.2183 - val_loss: 4.0712\n",
            "Epoch 84/100\n",
            "75/75 [==============================] - 34s 454ms/step - loss: 1.1417 - val_loss: 4.0199\n",
            "Epoch 85/100\n",
            "75/75 [==============================] - 33s 443ms/step - loss: 1.1085 - val_loss: 3.9790\n",
            "Epoch 86/100\n",
            "75/75 [==============================] - 35s 459ms/step - loss: 1.1120 - val_loss: 4.1016\n",
            "Epoch 87/100\n",
            "75/75 [==============================] - 39s 517ms/step - loss: 1.0900 - val_loss: 4.0550\n",
            "Epoch 88/100\n",
            "75/75 [==============================] - 34s 449ms/step - loss: 1.0742 - val_loss: 3.9702\n",
            "Epoch 89/100\n",
            "75/75 [==============================] - 33s 441ms/step - loss: 1.0579 - val_loss: 4.0421\n",
            "Epoch 90/100\n",
            "75/75 [==============================] - 33s 441ms/step - loss: 0.9966 - val_loss: 3.9360\n",
            "Epoch 91/100\n",
            "75/75 [==============================] - 33s 439ms/step - loss: 0.9325 - val_loss: 4.0349\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('/content/drive/MyDrive/Colab Notebooks/ALPR/ocr') \n",
        "\n",
        "\n",
        "with open('/content/drive/MyDrive/Colab Notebooks/ALPR/ocr' + '/history', 'wb') as file_pi:\n",
        "    pickle.dump(history, file_pi)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SwfXfuxSTwlV",
        "outputId": "cb4b7065-6d89-44d4-8da1-51b85d736e70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, lstm_cell_1_layer_call_fn, lstm_cell_1_layer_call_and_return_conditional_losses, lstm_cell_2_layer_call_fn while saving (showing 5 of 10). These functions will not be directly callable after loading.\n",
            "WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, lstm_cell_1_layer_call_fn, lstm_cell_1_layer_call_and_return_conditional_losses, lstm_cell_2_layer_call_fn while saving (showing 5 of 10). These functions will not be directly callable after loading.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "path_to_model ='/content/drive/MyDrive/Colab Notebooks/ALPR/ocr'\n",
        "model = tf.keras.models.load_model(path_to_model)"
      ],
      "metadata": {
        "id": "cqoxcT4Nl4l_"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "24mThbNjmnmT"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}